import java.util.Random;

public class SudokuBoard {
    private int[][] board;
    private int[][] solution;

    public SudokuBoard() {
        board = new int[9][9];
    }

    public int[][] getGrid() {
        return board;
    }

    public void printBoard() {
        for (int row = 0; row < 9; row++) {
            if (row % 3 == 0 && row != 0) {
                System.out.println("------+-------+------");
            }
            for (int col = 0; col < 9; col++) {
                if (col % 3 == 0 && col != 0) {
                    System.out.print("| ");
                }
                int cellValue = board[row][col];
                System.out.print(cellValue == 0 ? ". " : cellValue + " ");
            }
            System.out.println();
        }
    }

    public boolean isValidMove(int row, int col, int num) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num || board[i][col] == num) {
                return false;
            }
        }

        int startRow = row - row % 3;
        int startCol = col - col % 3;

        for (int i = startRow; i < startRow + 3; i++) {
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    public boolean isComplete() {
        for (int[] row : board) {
            for (int cellValue : row) {
                if (cellValue == 0) return false;
            }
        }
        return true;
    }

    public void generatePuzzle(int difficulty) {
        SudokuSolver solver = new SudokuSolver();
        int[][] fullBoard = new int[9][9];
        solver.solve(fullBoard);
        solution = copyBoard(fullBoard);
        board = copyBoard(fullBoard);

        int cellsToRemove = switch (difficulty) {
            case 1 -> 30; // Easy
            case 2 -> 40; // Medium
            case 3 -> 50; // Hard
            default -> 30;
        };

        Random rand = new Random();
        while (cellsToRemove > 0) {
            int row = rand.nextInt(9);
            int col = rand.nextInt(9);
            if (board[row][col] != 0) {
                board[row][col] = 0;
                cellsToRemove--;
            }
        }
    }

    private int[][] copyBoard(int[][] source) {
        int[][] copy = new int[9][9];
        for (int i = 0; i < 9; i++) {
            System.arraycopy(source[i], 0, copy[i], 0, 9);
        }
        return copy;
    }
}

// Testing Purposes Only
// public class TestSudokuBoard {
//    public static void main(String[] args) {
//        SudokuBoard board = new SudokuBoard();
//        board.generatePuzzle(1); // 1 = Easy, 2 = Medium, 3 = Hard
//
//        System.out.println("Generated Sudoku Puzzle:");
//        board.printBoard();
//    }
// }

